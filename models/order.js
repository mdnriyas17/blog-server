const mongoose = require("mongoose");
const orderProductSchema = new mongoose.Schema({
  product: { type: mongoose.Schema.Types.ObjectId, ref: "products" },
  productspec_id: { type: mongoose.Schema.Types.ObjectId },
  product_id: { type: mongoose.Schema.Types.ObjectId, ref: "products" },
  description: String,
  brand_id: {
    type: mongoose.Schema.Types.ObjectId,
    ref: "mastersettings",
  },
  category_id: [{
    type: mongoose.Schema.Types.ObjectId,
    ref: "mastersettings",  
  }],
  product_name: String,
  sku: String,
  product_image:[String],
  qrcode: String,
  qr_valid:{type:Date,required:true},
  qr_status:{type:Boolean,default:true},
  qr_scan:{type:Boolean,default:true},
  qr_refid:{type:String,required:true},
  kg: { type: Number, required: true },
  mrp: { type: Number },
  sp: { type: Number, required: true },
  tax: { type: Number },
  tax_persentage: { type: Number },
  qty: { type: Number, required: true, min: 1 },
  total: { type: Number },
});
const companyDetails = new mongoose.Schema({
  company_name: { type: String },
  gst_no: String,
  country: { type: String },
  state: { type: String },
  district: { type: String },
  city: { type: String },
  area: String,
  pincode: Number,
  address_line1: String,
  address_line2: String,
  landline_no_1: String,
  landline_no_2: String,
  email: String,
  mobile_no: String,
  website: String,
  logo: String,
  pan_no:String,
  invoice_notes: String,
  invoice_title: String,
  invoice_text: [String],
})
var order = new mongoose.Schema(
  {
    customer: { type: mongoose.Schema.Types.ObjectId, ref: "customer" },
    payment_id: { type: mongoose.Schema.Types.ObjectId, ref: "paymentinfos" },
    order_no: { type: Number, required: true },
    financial_year: { type: String, required: true },
    date: { type: Date, default: Date.now },
    delivery_address: {
      firstname: String,
      lastname: String,
      city: String,
      state: String,
      landmark: String,
      address_line_1: String,
      address_line_2: String,
      pincode: Number,
      mobile_no: Number,
      alternate_no: Number,
    },
    company_details: companyDetails,
    products: [orderProductSchema],
    tax: Number,
    total: Number,
    delivery_charge: Number,
    no_of_items: Number,

    cancel: { type: Boolean, default: false },
    status: {
      type: String,
      default: "Pending",
      enum: [
        "Pending",
        "Packing",
        "Billed",
        "Dispatched",
        "Delivered",
        "Cancel",
      ],
    },
  },
  {
    timestamps: true,
    versionKey: false,
  }
);

module.exports = mongoose.model("order", order);
